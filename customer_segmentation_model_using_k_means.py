# -*- coding: utf-8 -*-
"""Customer Segmentation Model using K-Means

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yGMr8qLTEK-mf-x4o0sgNZjf8Ck98ZXj
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Mall_Customers.csv')

df.head()

df.describe()

df.isnull().sum()

df.info()

df.rename(columns = {'Annual Income (k$)': 'AnnualIncome', 'Spending Score (1-100)': 'SpendingScore'}, inplace = True)

df.head()

sns.pairplot(df[['Age','AnnualIncome','SpendingScore']])
plt.show()

# Annual income vs Spending Score
plt.figure(figsize = (10,6))
plt.scatter(df['AnnualIncome'],df['SpendingScore'], s=50)
plt.xlabel('AnnualIncome')
plt.ylabel('SpendingScore')
plt.title('AnnualIncome vs SpendingScore')
plt.show()

from sklearn.cluster import KMeans

X = df[['AnnualIncome','SpendingScore']]

wcss = []

for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter=300, n_init=10, random_state = 0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

plt.figure(figsize = (10,6))
plt.plot(range(1,11),wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters = 5, init = 'k-means++', max_iter=300, n_init=10, random_state = 0)
y_kmeans = kmeans.fit_predict(X)

df['Cluster']=y_kmeans

df.head()

plt.figure(figsize=(10,6))
plt.scatter(X.iloc[:,0],X.iloc[:,1], c=y_kmeans, s=50, cmap='viridis')
centers = kmeans.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=0.75, marker='X')
plt.xlabel('AnnualIncome')
plt.ylabel('SpendingScore')
plt.title('Customer segments')
plt.show()

# Age vs Spending Score
plt.figure(figsize = (10,6))
plt.scatter(df['Age'],df['SpendingScore'], s=50)
plt.xlabel('Age')
plt.ylabel('SpendingScore')
plt.title('Age vs SpendingScore')
plt.show()

from sklearn.cluster import KMeans

X = df[['Age','SpendingScore']]

wcss = []

for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter=300, n_init=10, random_state = 0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

plt.figure(figsize = (10,6))
plt.plot(range(1,11),wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters = 4, init = 'k-means++', max_iter=300, n_init=10, random_state = 0)
y_kmeans = kmeans.fit_predict(X)
df['Age_Cluster']= y_kmeans

df.head()

plt.figure(figsize=(10,6))
plt.scatter(X.iloc[:,0],X.iloc[:,1], c=y_kmeans, s=50, cmap='viridis')
centers = kmeans.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=0.75, marker='X')
plt.xlabel('Age')
plt.ylabel('SpendingScore')
plt.title('Customer Age segments')
plt.show()

# Selecting feature for clustering
X = df[['Age','AnnualIncome','SpendingScore']]

# Determing the optimal number of clusters using the elbow method
wcss = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter=300, n_init=10, random_state = 0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plotting the elbow graph
plt.figure(figsize = (10,6))
plt.plot(range(1,11),wcss, marker = 'o')
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Applying K-Means with the chosen number of clusters
kmeans = KMeans(n_clusters = 6, init = 'k-means++', max_iter=300, n_init=10, random_state = 0)
y_kmeans = kmeans.fit_predict(X)

df['Age_Income_Spend_Cluster']= y_kmeans

df.head()

# Visualising the clusters in a 3D Plot
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize = (10,8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Age'], df['AnnualIncome'], df['SpendingScore'], c=df['Age_Income_Spend_Cluster'], s=50, cmap='viridis')
ax.set_xlabel('Age')
ax.set_ylabel('Annual Income')
ax.set_zlabel('Spending Score')
plt.title('Customer segments')
plt.show()

